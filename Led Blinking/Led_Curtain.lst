;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 11/22/2017 6:45:35 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF1B  	GOTO        54
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_wait:
;Led_Curtain.c,27 :: 		void wait() {
;Led_Curtain.c,28 :: 		Delay_ms(100);
0x001C	0x0E05      	MOVLW       5
0x001E	0x6E0B      	MOVWF       R11, 0
0x0020	0x0E0F      	MOVLW       15
0x0022	0x6E0C      	MOVWF       R12, 0
0x0024	0x0EF1      	MOVLW       241
0x0026	0x6E0D      	MOVWF       R13, 0
L_wait0:
0x0028	0x2E0D      	DECFSZ      R13, 1, 0
0x002A	0xD7FE      	BRA         L_wait0
0x002C	0x2E0C      	DECFSZ      R12, 1, 0
0x002E	0xD7FC      	BRA         L_wait0
0x0030	0x2E0B      	DECFSZ      R11, 1, 0
0x0032	0xD7FA      	BRA         L_wait0
;Led_Curtain.c,29 :: 		}
L_end_wait:
0x0034	0x0012      	RETURN      0
; end of _wait
_main:
;Led_Curtain.c,31 :: 		void main() {
;Led_Curtain.c,33 :: 		TRISA = 0x00;                                 // set direction to be output
0x0036	0x6A92      	CLRF        TRISA 
;Led_Curtain.c,34 :: 		TRISB = 0x00;                                 // set direction to be output
0x0038	0x6A93      	CLRF        TRISB 
;Led_Curtain.c,35 :: 		TRISC = 0x00;                                 // set direction to be output
0x003A	0x6A94      	CLRF        TRISC 
;Led_Curtain.c,36 :: 		TRISD = 0x00;                                 // set direction to be output
0x003C	0x6A95      	CLRF        TRISD 
;Led_Curtain.c,37 :: 		TRISE = 0x00;                                 // set direction to be output
0x003E	0x6A96      	CLRF        TRISE 
;Led_Curtain.c,39 :: 		LATA = 0x00;                                  // turn OFF the LATD leds
0x0040	0x6A89      	CLRF        LATA 
;Led_Curtain.c,40 :: 		LATB = 0x00;                                  // turn OFF the LATD leds
0x0042	0x6A8A      	CLRF        LATB 
;Led_Curtain.c,41 :: 		LATC = 0x00;                                  // turn OFF the LATC leds
0x0044	0x6A8B      	CLRF        LATC 
;Led_Curtain.c,42 :: 		LATD = 0x00;                                  // turn OFF the LATD leds
0x0046	0x6A8C      	CLRF        LATD 
;Led_Curtain.c,43 :: 		LATE = 0x00;                                  // turn OFF the LATD leds
0x0048	0x6A8D      	CLRF        LATE 
;Led_Curtain.c,45 :: 		while (1) {
L_main1:
;Led_Curtain.c,46 :: 		for (counter=0; counter<8; counter++) {
0x004A	0x6A15      	CLRF        _counter 
L_main3:
0x004C	0x0E08      	MOVLW       8
0x004E	0x5C15      	SUBWF       _counter, 0 
0x0050	0xE217      	BC          L_main4
;Led_Curtain.c,47 :: 		LATA |= 1 << counter;
0x0052	0xF001C015  	MOVFF       _counter, R1
0x0056	0x0E01      	MOVLW       1
0x0058	0x6E00      	MOVWF       R0 
0x005A	0x5001      	MOVF        R1, 0 
L__main10:
0x005C	0xE004      	BZ          L__main11
0x005E	0x3600      	RLCF        R0, 1 
0x0060	0x9000      	BCF         R0, 0 
0x0062	0x0FFF      	ADDLW       255
0x0064	0xD7FB      	BRA         L__main10
L__main11:
0x0066	0x5000      	MOVF        R0, 0 
0x0068	0x1289      	IORWF       LATA, 1 
;Led_Curtain.c,48 :: 		LATB |= 1 << counter;
0x006A	0x5000      	MOVF        R0, 0 
0x006C	0x128A      	IORWF       LATB, 1 
;Led_Curtain.c,49 :: 		LATC |= 1 << counter;
0x006E	0x5000      	MOVF        R0, 0 
0x0070	0x128B      	IORWF       LATC, 1 
;Led_Curtain.c,50 :: 		LATD |= 1 << counter;
0x0072	0x5000      	MOVF        R0, 0 
0x0074	0x128C      	IORWF       LATD, 1 
;Led_Curtain.c,51 :: 		LATE |= 1 << counter;
0x0076	0x5000      	MOVF        R0, 0 
0x0078	0x128D      	IORWF       LATE, 1 
;Led_Curtain.c,52 :: 		wait();
0x007A	0xDFD0      	RCALL       _wait
;Led_Curtain.c,46 :: 		for (counter=0; counter<8; counter++) {
0x007C	0x2A15      	INCF        _counter, 1 
;Led_Curtain.c,53 :: 		}
0x007E	0xD7E6      	BRA         L_main3
L_main4:
;Led_Curtain.c,55 :: 		counter = 0;
0x0080	0x6A15      	CLRF        _counter 
;Led_Curtain.c,56 :: 		while (counter<8) {
L_main6:
0x0082	0x0E08      	MOVLW       8
0x0084	0x5C15      	SUBWF       _counter, 0 
0x0086	0xE218      	BC          L_main7
;Led_Curtain.c,57 :: 		LATA &= ~(1 << counter);
0x0088	0xF001C015  	MOVFF       _counter, R1
0x008C	0x0E01      	MOVLW       1
0x008E	0x6E00      	MOVWF       R0 
0x0090	0x5001      	MOVF        R1, 0 
L__main12:
0x0092	0xE004      	BZ          L__main13
0x0094	0x3600      	RLCF        R0, 1 
0x0096	0x9000      	BCF         R0, 0 
0x0098	0x0FFF      	ADDLW       255
0x009A	0xD7FB      	BRA         L__main12
L__main13:
0x009C	0x1E00      	COMF        R0, 1 
0x009E	0x5000      	MOVF        R0, 0 
0x00A0	0x1689      	ANDWF       LATA, 1 
;Led_Curtain.c,58 :: 		LATB &= ~(1 << counter);
0x00A2	0x5000      	MOVF        R0, 0 
0x00A4	0x168A      	ANDWF       LATB, 1 
;Led_Curtain.c,59 :: 		LATC &= ~(1 << counter);
0x00A6	0x5000      	MOVF        R0, 0 
0x00A8	0x168B      	ANDWF       LATC, 1 
;Led_Curtain.c,60 :: 		LATD &= ~(1 << counter);
0x00AA	0x5000      	MOVF        R0, 0 
0x00AC	0x168C      	ANDWF       LATD, 1 
;Led_Curtain.c,61 :: 		LATE &= ~(1 << counter);
0x00AE	0x5000      	MOVF        R0, 0 
0x00B0	0x168D      	ANDWF       LATE, 1 
;Led_Curtain.c,62 :: 		wait();
0x00B2	0xDFB4      	RCALL       _wait
;Led_Curtain.c,63 :: 		counter++;
0x00B4	0x2A15      	INCF        _counter, 1 
;Led_Curtain.c,64 :: 		}
0x00B6	0xD7E5      	BRA         L_main6
L_main7:
;Led_Curtain.c,65 :: 		}
0x00B8	0xD7C8      	BRA         L_main1
;Led_Curtain.c,66 :: 		}
L_end_main:
0x00BA	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [26]    _wait
0x0036     [134]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [1]    _counter
0x0F89       [1]    LATA
0x0F8A       [1]    LATB
0x0F8B       [1]    LATC
0x0F8C       [1]    LATD
0x0F8D       [1]    LATE
0x0F92       [1]    TRISA
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0F95       [1]    TRISD
0x0F96       [1]    TRISE
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Label List: ** 
//----------------------------------------------
  L_wait0
  L_main1
  L_main2
  L_main3
  L_main4
  L_main5
  L_main6
  L_main7
  L_end_wait
  _wait
  L_end_main
  _main
  L__main10
  L__main11
  L__main12
  L__main13
